name: CI Pipeline for Microservices

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE_ORDER: order-service
  DOCKER_IMAGE_INVOICE: invoice-service

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ connectionStatus: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      rabbitmq:
        image: rabbitmq:management
        env:
          RABBITMQ_DEFAULT_USER: user
          RABBITMQ_DEFAULT_PASS: password
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmqctl status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (order-service)
        run: |
          cd order-service
          npm ci

      - name: Install dependencies (invoice-service)
        run: |
          cd invoice-service
          npm ci

      - name: Build order-service
        run: |
          cd order-service
          npm run build

      - name: Build invoice-service
        run: |
          cd invoice-service
          npm run build

      - name: Run tests (order-service)
        run: |
          cd order-service
          npm test

      - name: Run tests (invoice-service, optional)
        run: |
          cd invoice-service
          if [ -f package.json ] && grep -q '"test":' package.json; then npm test; else echo "No tests defined."; fi

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker Build and Push (order-service)
        if: github.ref == 'refs/heads/main'
        run: |
          cd order-service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_ORDER }}:$GITHUB_SHA .
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_ORDER }}:$GITHUB_SHA ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_ORDER }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_ORDER }}:$GITHUB_SHA
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_ORDER }}:latest

      - name: Docker Build and Push (invoice-service)
        if: github.ref == 'refs/heads/main'
        run: |
          cd invoice-service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_INVOICE }}:$GITHUB_SHA .
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_INVOICE }}:$GITHUB_SHA ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_INVOICE }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_INVOICE }}:$GITHUB_SHA
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_INVOICE }}:latest
